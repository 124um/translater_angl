#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
macOS Live Subtitles Overlay (Simplified Version)

- –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ —á–µ—Ä–µ–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–µ–≤–∞–π—Å BlackHole 2ch
- –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ ASR (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —É—Ä–æ–≤–Ω–∏)
- Tkinter overlay: –±–µ–∑—Ä–∞–º–æ—á–Ω–æ–µ –æ–∫–Ω–æ, –≤—Å–µ–≥–¥–∞ –ø–æ–≤–µ—Ä—Ö
- –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Ç–µ—Å—Ç –∞—É–¥–∏–æ –∑–∞—Ö–≤–∞—Ç–∞

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
  pip install sounddevice numpy
"""

import os
import sys
import time
import queue
import threading
import numpy as np
import sounddevice as sd
import tkinter as tk
from tkinter import font as tkfont

# ------------------ –ö–æ–Ω—Ñ–∏–≥ ------------------
TARGET_SR = 16000               # —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
BLOCK_SEC = 0.1                 # –¥–ª–∏–Ω–∞ –±–ª–æ–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
GUI_REFRESH_MS = 100            # ms –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ GUI
FONT_FAMILY = "Helvetica"
FONT_SIZE = 18
WINDOW_OPACITY = 0.90           # 0..1

# –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:
#  [+]/[-] ‚Äî —É–≤–µ–ª–∏—á–∏—Ç—å/—É–º–µ–Ω—å—à–∏—Ç—å —à—Ä–∏—Ñ—Ç
#  [,]/[.] ‚Äî —É–º–µ–Ω—å—à–∏—Ç—å/—É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
#  [C] ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω
#  [Q]/[Esc] ‚Äî –≤—ã–π—Ç–∏

# --------------------------------------------
# –ê—É–¥–∏–æ: –ø–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ BlackHole –∏ –ø–æ—Ç–æ–∫
# --------------------------------------------
def pick_blackhole_device():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –≤—Ö–æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ 'BlackHole' (input=True)."""
    devices = sd.query_devices()
    candidates = []
    for i, d in enumerate(devices):
        name = str(d.get("name", "")).lower()
        max_in = int(d.get("max_input_channels", 0))
        if "blackhole" in name and max_in > 0:
            candidates.append(i)
    
    if candidates:
        return candidates[0]
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º –∏ –ø–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫
    print("[Audio] –ù–µ –Ω–∞–π–¥–µ–Ω –≤—Ö–æ–¥ BlackHole. –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    for i, d in enumerate(devices):
        if d.get("max_input_channels", 0) > 0:
            print(f"  {i}: {d.get('name', 'Unknown')} (channels: {d.get('max_input_channels', 0)})")
    
    print("\n‚Ä¢ –£–±–µ–¥–∏—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BlackHole 2ch")
    print("‚Ä¢ –í Audio MIDI Setup —Å–æ–∑–¥–∞–π Multi-Output —Å BlackHole –∏ –≤—ã–±–µ—Ä–∏ –µ–≥–æ –≤ System Output.")
    print("\n–ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ...")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –≤—Ö–æ–¥–æ–º
    for i, d in enumerate(devices):
        if d.get("max_input_channels", 0) > 0:
            print(f"[Audio] –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ #{i}: {d.get('name', 'Unknown')}")
            return i
    
    print("[Audio] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤!")
    sys.exit(2)

# –û—á–µ—Ä–µ–¥–∏/—Ñ–ª–∞–≥–∏
raw_q = queue.Queue()
audio_levels = queue.Queue()
terminate = threading.Event()

# --------------------------------------------
# –ü–æ—Ç–æ–∫ –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ
# --------------------------------------------
def audio_callback(indata, frames, time_info, status):
    if status:
        print(f"[Audio] {status}", file=sys.stderr)
    raw_q.put(indata.copy())

def audio_thread():
    dev_index = pick_blackhole_device()
    dev_info = sd.query_devices(dev_index)
    src_sr = int(dev_info.get("default_samplerate", 48000))
    channels = min(2, int(dev_info.get("max_input_channels", 1))) or 1
    blocksize = int(src_sr * 0.05)  # 50–º—Å –±–ª–æ–∫–∏

    print(f"[Audio] Using device #{dev_index}: {dev_info['name']} @ {src_sr} Hz, ch={channels}")

    with sd.InputStream(device=dev_index,
                        channels=channels,
                        samplerate=src_sr,
                        blocksize=blocksize,
                        dtype="float32",
                        callback=audio_callback):
        while not terminate.is_set():
            time.sleep(0.05)

# --------------------------------------------
# –ü–æ—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ
# --------------------------------------------
def audio_analysis_thread():
    while not terminate.is_set():
        try:
            block = raw_q.get(timeout=0.1)
        except queue.Empty:
            continue

        if block.ndim == 2:
            mono = block.mean(axis=1)
        else:
            mono = block.astype(np.float32, copy=False)

        # –í—ã—á–∏—Å–ª—è–µ–º RMS —É—Ä–æ–≤–µ–Ω—å
        rms = np.sqrt(np.mean(mono**2))
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dB
        db = 20 * np.log10(max(rms, 1e-10))
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 0-100%
        level = max(0, min(100, (db + 60) * 1.67))  # -60dB to 0dB -> 0-100%
        
        audio_levels.put(level)
        time.sleep(0.02)

# --------------------------------------------
# GUI (Tkinter overlay)
# --------------------------------------------
class OverlayApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Live Audio Monitor")
        self.root.overrideredirect(True)  # –±–µ–∑ —Ä–∞–º–∫–∏
        self.root.attributes("-topmost", True)
        self.root.attributes("-alpha", WINDOW_OPACITY)

        sw = self.root.winfo_screenwidth()
        sh = self.root.winfo_screenheight()
        w = int(sw * 0.60)
        h = int(sh * 0.15)
        x = int((sw - w) / 2)
        y = int(sh - h - 40)
        self.root.geometry(f"{w}x{h}+{x}+{y}")

        self.font_size = FONT_SIZE
        self.font = tkfont.Font(family=FONT_FAMILY, size=self.font_size)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        self.content_frame = tk.Frame(self.root, bg="#000000")
        self.content_frame.pack(fill="both", expand=True, padx=16, pady=12)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = tk.Label(self.content_frame, 
                                   text="üéµ Live Audio Monitor", 
                                   font=tkfont.Font(family=FONT_FAMILY, size=self.font_size-2),
                                   fg="#00FF00", bg="#000000")
        self.title_label.pack(pady=(0, 8))
        
        # –£—Ä–æ–≤–µ–Ω—å –∞—É–¥–∏–æ
        self.level_var = tk.StringVar(value="Waiting for audio...")
        self.level_label = tk.Label(self.content_frame, 
                                   textvariable=self.level_var,
                                   font=self.font, 
                                   fg="#FFFFFF", bg="#000000")
        self.level_label.pack(pady=4)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = tk.Canvas(self.content_frame, 
                                 height=20, 
                                 bg="#333333", 
                                 highlightthickness=0)
        self.progress.pack(fill="x", pady=8)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        self.help_var = tk.StringVar(value="Controls: +/- font, [] opacity, C clear, Q quit")
        self.help_label = tk.Label(self.content_frame, 
                                  textvariable=self.help_var,
                                  font=tkfont.Font(family=FONT_FAMILY, size=self.font_size-4),
                                  fg="#888888", bg="#000000")
        self.help_label.pack(pady=(8, 0))

        self._drag_data = {"x": 0, "y": 0}
        self.content_frame.bind("<ButtonPress-1>", self._start_move)
        self.content_frame.bind("<B1-Motion>", self._on_move)

        self.root.bind("<KeyPress-plus>", self._inc_font)
        self.root.bind("<KeyPress-equal>", self._inc_font)
        self.root.bind("<KeyPress-minus>", self._dec_font)
        self.root.bind("<KeyPress-bracketleft>", self._dec_alpha)
        self.root.bind("<KeyPress-bracketright>", self._inc_alpha)
        self.root.bind("<KeyPress-c>", self._clear)
        self.root.bind("<Escape>", self._quit)
        self.root.bind("<KeyPress-q>", self._quit)

        self.root.after(GUI_REFRESH_MS, self._tick)

    def _start_move(self, event):
        self._drag_data["x"] = event.x
        self._drag_data["y"] = event.y

    def _on_move(self, event):
        x = self.root.winfo_x() + event.x - self._drag_data["x"]
        y = self.root.winfo_y() + event.y - self._drag_data["y"]
        self.root.geometry(f"+{x}+{y}")

    def _inc_font(self, event=None):
        self.font_size += 2
        self.font.configure(size=self.font_size)
        self.title_label.configure(font=tkfont.Font(family=FONT_FAMILY, size=self.font_size-2))

    def _dec_font(self, event=None):
        self.font_size = max(10, self.font_size - 2)
        self.font.configure(size=self.font_size)
        self.title_label.configure(font=tkfont.Font(family=FONT_FAMILY, size=self.font_size-2))

    def _inc_alpha(self, event=None):
        a = float(self.root.attributes("-alpha"))
        a = min(1.0, a + 0.05)
        self.root.attributes("-alpha", a)

    def _dec_alpha(self, event=None):
        a = float(self.root.attributes("-alpha"))
        a = max(0.3, a - 0.05)
        self.root.attributes("-alpha", a)

    def _clear(self, event=None):
        self.level_var.set("Cleared")

    def _quit(self, event=None):
        terminate.set()
        self.root.destroy()

    def _update_progress_bar(self, level):
        # –û—á–∏—â–∞–µ–º –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress.delete("all")
        
        # –§–æ–Ω
        self.progress.create_rectangle(0, 0, self.progress.winfo_width(), 20, 
                                     fill="#333333", outline="")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        width = self.progress.winfo_width()
        progress_width = int((level / 100.0) * width)
        
        if level > 80:
            color = "#FF0000"  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        elif level > 50:
            color = "#FFFF00"  # –ñ–µ–ª—Ç—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö
        else:
            color = "#00FF00"  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –Ω–∏–∑–∫–∏—Ö
            
        self.progress.create_rectangle(0, 0, progress_width, 20, 
                                     fill=color, outline="")
        
        # –¢–µ–∫—Å—Ç —É—Ä–æ–≤–Ω—è
        self.progress.create_text(width//2, 10, 
                                text=f"{level:.1f}%", 
                                fill="#FFFFFF", 
                                font=tkfont.Font(family=FONT_FAMILY, size=10))

    def _tick(self):
        try:
            while True:
                level = audio_levels.get_nowait()
                self.level_var.set(f"Audio Level: {level:.1f}%")
                self._update_progress_bar(level)
        except queue.Empty:
            pass

        self.root.after(GUI_REFRESH_MS, self._tick)

    def run(self):
        self.root.mainloop()

# --------------------------------------------
# main
# --------------------------------------------
def main():
    print("[Init] –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ Live Audio Monitor...")
    print("[Init] –≠—Ç–∞ –≤–µ—Ä—Å–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ –∞—É–¥–∏–æ –±–µ–∑ ASR")

    print("[Init] –ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞‚Ä¶")
    t_audio = threading.Thread(target=audio_thread, daemon=True)
    t_audio.start()

    print("[Init] –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ‚Ä¶")
    t_analysis = threading.Thread(target=audio_analysis_thread, daemon=True)
    t_analysis.start()

    print("[Init] –ó–∞–ø—É—Å–∫ –æ–≤–µ—Ä–ª–µ–π-–æ–∫–Ω–∞‚Ä¶ (–≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: +/- —à—Ä–∏—Ñ—Ç, [] –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å, C –æ—á–∏—Å—Ç–∫–∞, Q/Esc –≤—ã—Ö–æ–¥)")
    app = OverlayApp()
    try:
        app.run()
    finally:
        terminate.set()
        t_audio.join(timeout=1.0)
        t_analysis.join(timeout=1.0)
        print("[Exit] Bye.")

if __name__ == "__main__":
    main() 